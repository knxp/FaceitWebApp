@using faceitWebApp.Models
@inject NavigationManager NavigationManager
@inject ActivePlayersHandler ActivePlayersHandler

<div class="team-player-list-container">
    <h4 class="team-player-list-header">Players</h4>
    <div class="team-player-list">
        @if (Players != null && Players.Any())
        {
            var sortedPlayers = Players
            .OrderByDescending(p => processedPlayers?.FirstOrDefault(pp => pp.PlayerId == p.PlayerId)?.MatchesWithTeam ?? 0)
            .ThenByDescending(p => p.Elo)
            .ToList();
            var columns = 2;
            var itemsPerColumn = (int)Math.Ceiling(sortedPlayers.Count / (double)columns);

            for (int i = 0; i < itemsPerColumn; i++)
            {
                for (int j = 0; j < columns; j++)
                {
                    var index = j * itemsPerColumn + i;
                    if (index < sortedPlayers.Count)
                    {
                        var player = sortedPlayers[index];
                        var processedPlayer = processedPlayers?.FirstOrDefault(p => p.PlayerId == player.PlayerId);
                        var isLoading = isProcessing && processedPlayer == null;

                        <div class="team-player-list-item" @onclick="() => NavigateToPlayerStats(player.Nickname)">
                            <div class="team-player-list-player-info">
                                <span class="team-player-list-player-name">@player.Nickname</span>
                                @if (isLoading)
                                {
                                    <span class="team-player-list-matches-count loading">Loading...</span>
                                }
                                else
                                {
                                    <span class="team-player-list-matches-count @(processedPlayer?.MatchesWithTeam == 0 ? "inactive" : "")">
                                        @(processedPlayer?.MatchesWithTeam > 0
                                            ? $"{processedPlayer.MatchesWithTeam} matches this season"
                                            : "Non active player")
                                    </span>
                                }
                            </div>
                            <div class="team-player-list-elo-container">
                                @if (!isLoading)
                                {
                                    <span
                                        class="team-player-list-status-indicator @(processedPlayer?.MatchesWithTeam > 0 ? "active" : "inactive")"
                                        title="@(processedPlayer?.MatchesWithTeam > 0 ? "Active" : "Inactive") this season"></span>
                                }
                                <svg viewBox="0 0 24 12" fill="none" xmlns="http://www.w3.org/2000/svg"
                                    class="team-player-list-elo-icon">
                                    <path
                                        d="M12 3c0 .463-.105.902-.292 1.293l1.998 2A2.97 2.97 0 0115 6a2.99 2.99 0 011.454.375l1.921-1.921a3 3 0 111.5 1.328l-2.093 2.093a3 3 0 11-5.49-.168l-1.999-2a2.992 2.992 0 01-2.418.074L5.782 7.876a3 3 0 11-1.328-1.5l1.921-1.921A3 3 0 1112 3z"
                                        fill="#ffffff"></path>
                                </svg>
                                <span class="team-player-list-elo-number">@player.Elo</span>
                            </div>
                        </div>
                    }
                }
            }
        }
        else
        {
            <div class="team-player-list-empty">No players found</div>
        }
    </div>
</div>


<style>
    .team-player-list-container {
        background-color: rgba(255, 255, 255, 0.1);
        border: 1px solid #fd7d27;
        border-radius: 10px;
        padding: 20px;
        width: 500px;
    }

    .team-player-list-header {
        color: #fd7d27;
        font-size: 2.5rem;
        text-align: center;
        margin-bottom: 20px;
        font-family: 'TolyerNo1', sans-serif;
        letter-spacing: 0.6px;
        padding-bottom: 10px;
        border-bottom: 3px solid #fd7d2780;
    }

    .team-player-list {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
    }

    .team-player-list-item {
        color: #ffffff;
        font-size: 1.4rem;
        font-family: 'TolyerNo1', sans-serif;
        padding: 8px;
        border-radius: 5px;
        transition: all 0.3s;
        display: flex;
        justify-content: space-between;
        align-items: center;
        cursor: pointer;
        position: relative;
    }

    .team-player-list-item:hover {
        background-color: rgba(255, 255, 255, 0.05);
    }

    .team-player-list-item:hover .team-player-list-player-name {
        text-decoration: underline;
        text-underline-offset: 4px;
        color: #fd7d27;
    }

    .team-player-list-matches-count {
        font-size: 0.8rem;
        color: #aaaaaa;
        letter-spacing: 0.4px;
    }

    .team-player-list-player-info {
        display: flex;
        flex-direction: column;
        gap: 2px;
    }

    .team-player-list-player-name {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        margin-right: 10px;
        font-size: 1.5rem;
        letter-spacing: 0.6px;
    }

    .team-player-list-elo-container {
        display: flex;
        align-items: center;
        gap: 5px;
        flex-shrink: 0;
    }

    .team-player-list-elo-icon {
        width: 24px;
        height: 24px;
    }

    .team-player-list-elo-number {
        color: #ffffff;
        font-size: 1.5rem;
        letter-spacing: 0.6px;
    }

    .team-player-list-matches-count.inactive {
        color: #aaaaaa;
    }

    .team-player-list-matches-count.loading {
        color: #ffffff;
        font-style: italic;
    }

    .team-player-list-status-indicator {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        margin-right: 5px;
    }

    .team-player-list-status-indicator.active {
        background-color: #4CAF50;
    }

    .team-player-list-status-indicator.inactive {
        background-color: #ff4444;
    }

    .team-player-list-empty {
        text-align: center;
        color: #ffffff;
        font-size: 1.2rem;
        padding: 20px;
        grid-column: span 2;
    }

    @@media (max-width: 768px) {
        .team-player-list-container {
            width: 95%;
            padding: 15px;
            margin: 10px auto;
        }

        .team-player-list {
            grid-template-columns: 1fr;
            gap: 10px;
        }

        .team-player-list-header {
            font-size: 2rem;
        }

        .team-player-list-player-name {
            font-size: 1.3rem;
        }

        .team-player-list-elo-number {
            font-size: 1.3rem;
        }

        .team-player-list-matches-count {
            font-size: 0.7rem;
        }
    }
</style>

@code {
    [Parameter]
    public List<TeamPlayer> Players { get; set; }

    [Parameter]
    public string TeamId { get; set; }

    [Parameter]
    public string TeamName { get; set; }

    private List<ActivePlayer> processedPlayers;
    private bool isProcessing;
    private string previousTeamId;
    private string currentSeason;

    protected override void OnInitialized()
    {
        // Get the most recent season
        currentSeason = SeasonDates.Seasons
        .OrderByDescending(s => s.Value.Start)
        .First()
        .Key;

        Console.WriteLine($"Using current season: {currentSeason}");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Players != null && Players.Any() &&
        !string.IsNullOrEmpty(TeamId) &&
        !string.IsNullOrEmpty(TeamName) &&
        TeamId != previousTeamId)
        {
            try
            {
                isProcessing = true;
                processedPlayers = null;
                StateHasChanged();

                processedPlayers = await ActivePlayersHandler.GetActivePlayersAsync(
                TeamId,
                TeamName,
                Players,
                currentSeason);
                previousTeamId = TeamId;
            }
            finally
            {
                isProcessing = false;
                StateHasChanged();
            }
        }
    }

    private void NavigateToPlayerStats(string nickname)
    {
        NavigationManager.NavigateTo($"/player-league-stats/{Uri.EscapeDataString(nickname)}");
    }
}