@using faceitApp.Models

<div class="comparison-box">
    <h4>Map Comparison</h4>
    <div class="stats-grid">
        <div class="header-row">
            <div class="stat-header">Win Rate</div>
            <div class="stat-header">Matches</div>
            <div class="stat-header map-header">Map</div>
            <div class="stat-header">Matches</div>
            <div class="stat-header">Win Rate</div>
        </div>
        @{
            var defaultMaps = new[] { "Ancient", "Anubis", "Inferno", "Mirage", "Nuke", "Vertigo", "Dust2" };

            var team1Maps = Team1Maps?.Where(s => !s.Map.Contains("wingman", StringComparison.OrdinalIgnoreCase)
            && !s.Map.Equals("Overpass", StringComparison.OrdinalIgnoreCase))
            .ToDictionary(s => s.Map, s => s) ?? new Dictionary<string, MapStats>();

            var team2Maps = Team2Maps?.Where(s => !s.Map.Contains("wingman", StringComparison.OrdinalIgnoreCase)
            && !s.Map.Equals("Overpass", StringComparison.OrdinalIgnoreCase))
            .ToDictionary(s => s.Map, s => s) ?? new Dictionary<string, MapStats>();

            foreach (var mapName in defaultMaps)
            {
                var map1 = team1Maps.GetValueOrDefault(mapName, new MapStats { Map = mapName, TotalMatches = 0, Wins = 0 });
                var map2 = team2Maps.GetValueOrDefault(mapName, new MapStats { Map = mapName, TotalMatches = 0, Wins = 0 });

                <div class="stat-value @GetComparisonClass(map1.WinRate, map2.WinRate)">
                    @($"{map1.WinRate:F1}%")</div>
                <div class="stat-value">@map1.TotalMatches</div>
                <div class="map-name">@mapName</div>
                <div class="stat-value">@map2.TotalMatches</div>
                <div class="stat-value @GetComparisonClass(map2.WinRate, map1.WinRate)">
                    @($"{map2.WinRate:F1}%")</div>
            }
        }
    </div>
</div>

<style>
    .comparison-box {
        background-color: rgba(255, 255, 255, 0.1);
        border: 1px solid #fd7d27;
        border-radius: 10px;
        padding: 20px;
        margin: 20px auto;
        width: 1120px;
        position: relative;
        left: 50%;
        transform: translateX(-50%);
    }

    .comparison-box h4 {
        color: #fd7d27;
        font-size: 3rem;
        text-align: center;
        margin-bottom: 20px;
        font-family: 'TolyerNo1', sans-serif;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: 1fr 1fr 1.5fr 1fr 1fr;
        gap: 15px;
        align-items: center;
    }

    .header-row {
        display: contents;
    }

    .stat-header {
        color: #ffffff;
        font-size: 2rem;
        text-align: center;
        font-family: 'TolyerNo1', sans-serif;
        text-transform: uppercase;
        letter-spacing: 1px;
        padding-bottom: 15px;
        border-bottom: 1px solid rgba(253, 125, 39, 0.3);
        margin-bottom: 15px;
    }

    .map-header {
        text-align: center;
    }

    .map-name {
        color: #ffffff;
        font-size: 2rem;
        text-align: center;
        font-family: 'TolyerNo1', sans-serif;
        letter-spacing: 1px;
    }

    .stat-value {
        font-size: 2rem;
        text-align: center;
        font-family: 'TolyerNo1', sans-serif;
        letter-spacing: 1px;
        color: #ffffff;
    }

    .better {
        color: #90EE90;
        /* Light green */
    }

    .worse {
        color: #FFB6C1;
        /* Light red */
    }

    .equal {
        color: #7ad5ec;
        /* Light blue */
    }
</style>

@code {
    [Parameter]
    public List<MapStats> Team1Maps { get; set; }

    [Parameter]
    public List<MapStats> Team2Maps { get; set; }

    private string GetComparisonClass(double value1, double value2)
    {
        if (Math.Abs(value1 - value2) < 0.01) return "equal";
        return value1 > value2 ? "better" : "worse";
    }
}