@using faceitWebApp.Models
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="comparison-box">
    <h4>Map Comparison</h4>

    @if (Team1Maps != null && Team2Maps != null)
    {
        var validMaps = new[] { "Ancient", "Anubis", "Inferno", "Mirage", "Nuke", "Vertigo", "Dust2" };

        var team1MapDict = Team1Maps
        .Where(m => validMaps.Contains(m.Map, StringComparer.OrdinalIgnoreCase))
        .GroupBy(m => m.Map, StringComparer.OrdinalIgnoreCase)
        .ToDictionary(
        g => g.Key,
        g => g.First(),
        StringComparer.OrdinalIgnoreCase
        );

        var team2MapDict = Team2Maps
        .Where(m => validMaps.Contains(m.Map, StringComparer.OrdinalIgnoreCase))
        .GroupBy(m => m.Map, StringComparer.OrdinalIgnoreCase)
        .ToDictionary(
        g => g.Key,
        g => g.First(),
        StringComparer.OrdinalIgnoreCase
        );

        <div class="maps-grid">
            <div class="header-row">
                <div class="stat-header">Win Rate</div>
                <div class="stat-header">Matches</div>
                <div class="stat-header map-header">Map</div>
                <div class="stat-header">Matches</div>
                <div class="stat-header">Win Rate</div>
            </div>

            @foreach (var mapName in validMaps)
            {
                var team1Map = team1MapDict.GetValueOrDefault(mapName);
                var team2Map = team2MapDict.GetValueOrDefault(mapName);

                <div class="map-comparison">
                    <div class="stat-value @GetComparisonClass(team1Map?.WinRate ?? 0, team2Map?.WinRate ?? 0)">
                        @((team1Map?.WinRate ?? 0).ToString("F1"))%
                    </div>
                    <div class="stat-value">@(team1Map?.TotalMatches ?? 0)</div>
                    <div class="map-name">@mapName</div>
                    <div class="stat-value">@(team2Map?.TotalMatches ?? 0)</div>
                    <div class="stat-value @GetComparisonClass(team2Map?.WinRate ?? 0, team1Map?.WinRate ?? 0)">
                        @((team2Map?.WinRate ?? 0).ToString("F1"))%
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="no-data-message">No map data available for comparison</div>
    }
</div>

<style>
    .comparison-box {
        background-color: rgba(255, 255, 255, 0.1);
        border: 1px solid #fd7d27;
        border-radius: 10px;
        padding: 20px;
        margin: 20px auto;
        width: 1120px;
        position: relative;
        left: 50%;
        transform: translateX(-50%);
    }

    .comparison-box h4 {
        color: #fd7d27;
        font-size: 3rem;
        text-align: center;
        margin-bottom: 20px;
        font-family: 'TolyerNo1', sans-serif;
    }

    .maps-grid {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 15px;
        align-items: center;
    }

    .header-row {
        display: contents;
    }

    .stat-header {
        color: #ffffff;
        font-size: 2rem;
        text-align: center;
        font-family: 'TolyerNo1', sans-serif;
        text-transform: uppercase;
        letter-spacing: 1px;
        padding-bottom: 15px;
        border-bottom: 1px solid rgba(253, 125, 39, 0.3);
        margin-bottom: 15px;
    }

    .map-comparison {
        display: contents;
    }

    .team1-stats,
    .team2-stats {
        display: contents;
    }

    .map-name {
        color: #ffffff;
        font-size: 2rem;
        text-align: center;
        font-family: 'TolyerNo1', sans-serif;
        letter-spacing: 1px;
        grid-column: 3;
    }

    .stat-value {
        font-size: 2rem;
        text-align: center;
        font-family: 'TolyerNo1', sans-serif;
        letter-spacing: 1px;
        color: #ffffff;
    }

    .better {
        color: #90EE90;
    }

    .worse {
        color: #FFB6C1;
    }

    .equal {
        color: #7ad5ec;
    }

    .no-data-message {
        text-align: center;
        color: #ffffff;
        font-size: 1.5rem;
        font-family: 'TolyerNo1', sans-serif;
        margin: 2rem 0;
    }

    @@media (max-width: 768px) {
        .comparison-box {
            width: 95%;
            padding: 15px;
            margin: 15px auto;
            transform: none;
            left: 0;
        }

        .comparison-box h4 {
            font-size: 2rem;
            margin-bottom: 15px;
        }

        .maps-grid {
            grid-template-columns: repeat(5, 1fr);
            gap: 8px;
        }

        .stat-header {
            font-size: 1.3rem;
            padding-bottom: 10px;
        }

        .map-header {
            font-size: 1.4rem;
        }

        .map-name {
            font-size: 1.3rem;
        }

        .stat-value {
            font-size: 1.2rem;
            padding: 4px 2px;
        }

        .no-data-message {
            font-size: 1.3rem;
            margin: 1.5rem 0;
        }
    }

    @@media (max-width: 480px) {
        .maps-grid {
            gap: 4px;
        }

        .stat-header {
            font-size: 1.1rem;
        }

        .map-name {
            font-size: 1.1rem;
        }

        .stat-value {
            font-size: 1rem;
        }
    }
</style>

@code {
    [Parameter]
    public List<MapStats> Team1Maps { get; set; }

    [Parameter]
    public List<MapStats> Team2Maps { get; set; }

    private string GetComparisonClass(double value1, double value2)
    {
        if (Math.Abs(value1 - value2) < 0.01) return "equal";
        return value1 > value2 ? "better" : "worse";
    }

    protected override void OnParametersSet()
    {
        Team1Maps ??= new List<MapStats>();
        Team2Maps ??= new List<MapStats>();
    }
}