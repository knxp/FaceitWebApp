@using faceitWebApp.Models
@inject SeasonStatsHandler SeasonStatsHandler

<div class="season-selector">
    <button class="season-button @(selectedSeason == "overall" ? "active" : "")"
        @onclick="@(() => SwitchSeason("overall"))">Overall</button>
    @foreach (var season in SeasonDates.Seasons.Keys)
    {
        <button class="season-button @(selectedSeason == season ? "active" : "")" @onclick="@(() => SwitchSeason(season))">
            @season
        </button>
    }
</div>

<div class="map-stats-box">
    <div class="map-header">
        <div class="map-header-cell header-map">Map</div>
        <div class="map-header-cell">Matches</div>
        <div class="map-header-cell">Win Rate</div>
    </div>
    <div class="map-stats-grid">
        @if (selectedSeason != "overall" && isLoadingSeasonStats)
        {
            <div class="loading-container">
                <div class="loading-spinner"></div>
                <p>Loading season statistics...</p>
            </div>
        }
        else
        {
            var defaultMaps = selectedSeason == "overall"
            ? new[] { "Ancient", "Anubis", "Inferno", "Mirage", "Nuke", "Vertigo", "Train", "Dust2" }
            : SeasonDates.MapPools.TryGetValue(selectedSeason, out var maps)
            ? maps
            : new[] { "Ancient", "Anubis", "Inferno", "Mirage", "Nuke", "Dust2" }; // fallback maps
            var displayStats = selectedSeason == "overall" ? MapStats : SeasonMapStats;

            // Create dictionary with normalized map names (remove "de_" prefix)
            var existingMaps = displayStats?
            .Where(s => !s.Map.Contains("wingman", StringComparison.OrdinalIgnoreCase)
            && !s.Map.Equals("Overpass", StringComparison.OrdinalIgnoreCase))
            .ToDictionary(
            s => s.Map.Replace("de_", "", StringComparison.OrdinalIgnoreCase),
            s => s,
            StringComparer.OrdinalIgnoreCase
            ) ?? new Dictionary<string, MapStats>(StringComparer.OrdinalIgnoreCase);

            foreach (var mapName in defaultMaps.OrderByDescending(m =>
            {
                var normalizedMapName = m.Replace("de_", "", StringComparison.OrdinalIgnoreCase);
                return existingMaps.GetValueOrDefault(normalizedMapName, new MapStats { Map = m }).TotalMatches;
            }))
            {
                var normalizedMapName = mapName.Replace("de_", "", StringComparison.OrdinalIgnoreCase);
                var mapStats = existingMaps.GetValueOrDefault(normalizedMapName, new MapStats { Map = mapName });

                <div class="map-stat-row">
                    <span class="map-stat-label">@mapName</span>
                    <span class="stat-value matches">@mapStats.TotalMatches</span>
                    <span class="map-stat-value @GetWinRateClass(mapStats.WinRate)">
                        @(mapStats.TotalMatches > 0 ? $"{mapStats.WinRate:F1}%" : "No Matches")
                    </span>
                </div>
            }
        }
    </div>
</div>

<style>
    .season-selector {
        display: flex;
        justify-content: right;
        gap: 10px;
        margin-bottom: 20px;
        flex-wrap: wrap;
        width: 100%;
        max-width: 100%;
        overflow-x: auto;
    }

    .season-button {
        background-color: rgba(255, 255, 255, 0.1);
        border: 1px solid #fd7d27;
        color: #ffffff;
        height: 50px;
        min-width: 120px;
        padding: 5px 20px;
        border-radius: 5px;
        font-size: 1.4rem;
        cursor: pointer;
        transition: all 0.3s ease;
        font-family: 'TolyerNo1', sans-serif;
        display: flex;
        text-align: center;
        justify-content: center;
        gap: 10px;
        flex-shrink: 0;
    }

    .season-button:hover {
        background-color: rgba(253, 125, 39, 0.2);
    }

    .season-button.active {
        background-color: #fd7d27;
        color: white;
    }

    .spinner {
        width: 16px;
        height: 16px;
        border: 2px solid #ffffff;
        border-top-color: transparent;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding-top: 70px;
        color: #ffffff;
        font-family: 'TolyerNo1', sans-serif;
        font-size: 2.1rem;
    }

    .loading-spinner {
        width: 70px;
        height: 70px;
        border: 4px solid rgba(253, 125, 39, 0.3);
        border-top-color: #fd7d27;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 30px;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    .map-stats-box {
        background-color: #ffffff1a;
        border: 1px solid #fd7d27;
        border-radius: 10px;
        padding: 20px;
        width: 700px;
        margin-left: 10px;
    }

    .map-header {
        display: grid;
        grid-template-columns: 2fr 1fr 1fr;
        align-items: center;
        gap: 10px;
        padding-bottom: 15px;
        border-bottom: 1px solid rgba(253, 125, 39, 0.3);
        margin-bottom: 15px;
        font-size: 2rem;
    }

    .header-cell {
        color: #ffffff;
        font-weight: bold;
        text-transform: uppercase;
        font-family: 'TolyerNo1', sans-serif;
        text-align: center;
        letter-spacing: 1px;
    }

    .header-map {
        text-align: left;
        padding-left: 10px;
    }

    .map-stats-grid {
        display: flex;
        flex-direction: column;
        gap: 12px;
        min-height: 300px;
    }

    .map-stat-row {
        display: grid;
        grid-template-columns: 2fr 1fr 1fr;
        align-items: center;
        padding: 8px 5px;
        border-radius: 5px;
        transition: background-color 0.3s;
        border: 0.5px solid #ffffff1a;
    }

    .map-stat-row:hover {
        background-color: rgba(255, 255, 255, 0.05);
    }

    .map-stat-label {
        color: #ffffff;
        font-size: 2rem;
        font-family: 'TolyerNo1', sans-serif;
        letter-spacing: 0.5px;
        text-align: left;
        padding-left: 10px;
    }

    .map-stat-value {
        color: #fd7d27;
        font-size: 2.2rem;
        font-family: 'TolyerNo1', sans-serif;
        font-weight: bold;
        letter-spacing: 1px;
        text-align: center;
    }

    .matches {
        color: #ffffff;
        font-size: 2rem;
    }

    .win-rate-high {
        color: #00FF00 !important;
        /* Green */
    }

    .win-rate-low {
        color: #ff6b6b !important;
        /* Light Red */
    }

    .win-rate-neutral {
        color: #e0e0e0 !important;
        /* Gray */
    }

    @@media (max-width: 768px) {
        .map-stats-box {
            width: 95%;
            padding: 15px;
            margin: 10px auto;
        }

        .season-selector {
            justify-content: flex-start;
            gap: 8px;
            margin-bottom: 15px;
            padding: 0 10px;
        }

        .season-button {
            height: 40px;
            min-width: 100px;
            padding: 5px 15px;
            font-size: 1.2rem;
            flex: 0 0 auto;
        }

        .map-header {
            font-size: 1.4rem;
            padding-bottom: 10px;
            margin-bottom: 10px;
        }

        .map-header-cell:nth-child(2) {
            text-align: center;
            margin-left: -50px;
        }

        .map-stat-row {
            padding: 6px 5px;
        }

        .map-stat-label {
            font-size: 1.6rem;
            padding-left: 5px;
        }

        .map-stat-value {
            font-size: 1.8rem;
        }

        .matches {
            font-size: 1.6rem;
        }

        .loading-container {
            padding-top: 40px;
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
            margin-bottom: 20px;
        }

        .loading-container p {
            font-size: 1.6rem;
        }
    }
</style>

@code {
    [Parameter]
    public List<MapStats> MapStats { get; set; }

    [Parameter]
    public string TeamId { get; set; }

    [Parameter]
    public string TeamName { get; set; }

    [Parameter]
    public List<TeamPlayer> Players { get; set; }

    private string selectedSeason = "overall";
    private List<MapStats> SeasonMapStats;
    private bool isLoadingSeasonStats;
    private string previousTeamId;
    private Dictionary<string, List<MapStats>> seasonStatsCache = new();

    protected override async Task OnParametersSetAsync()
    {
        // If TeamId changes, reset season stats and cache
        if (TeamId != previousTeamId)
        {
            previousTeamId = TeamId;
            SeasonMapStats = null;
            seasonStatsCache.Clear(); // Clear the cache for the new team

            // If we're currently on a season view, reload the stats
            if (selectedSeason != "overall" && !string.IsNullOrEmpty(TeamId))
            {
                await LoadSeasonStats();
            }
        }
    }

    private async Task LoadSeasonStats()
    {
        isLoadingSeasonStats = true;
        StateHasChanged();

        try
        {
            SeasonMapStats = await SeasonStatsHandler.GetSeasonMapStatsAsync(
            TeamId,
            TeamName,
            Players,
            selectedSeason
            );
        }
        finally
        {
            isLoadingSeasonStats = false;
            StateHasChanged();
        }
    }

    private async Task SwitchSeason(string season)
    {
        if (selectedSeason == season) return;

        selectedSeason = season;

        // Check if we already have the stats for this season in memory
        if (season != "overall" && !string.IsNullOrEmpty(TeamId))
        {
            if (seasonStatsCache.ContainsKey(season))
            {
                SeasonMapStats = seasonStatsCache[season];
            }
            else
            {
                await LoadSeasonStats();
                seasonStatsCache[season] = SeasonMapStats;
            }
        }

        StateHasChanged();
    }

    private string GetWinRateClass(double winRate)
    {
        if (winRate > 50)
        {
            return "win-rate-high";
        }
        else if (winRate < 50)
        {
            return "win-rate-low";
        }
        else
        {
            return "win-rate-neutral";
        }
    }
}