@page "/team-stats"
@page "/team-stats/{TeamName}"
@using faceitWebApp.Handlers
@using faceitWebApp.Utilities
@using faceitWebApp.Models
@using faceitWebApp.Components
@inject TeamStatsHandler TeamStatsHandler
@inject GetTeamID GetTeamID
@inject NavigationManager NavigationManager
@inject GetPlayerInfo GetPlayerInfo

<div class="@(isLoading ? "team-stats-page-overlay" : "")">
    <h3 class="text-center">Team Stats</h3>

    <div class="team-stats-page-search-container mb-4">
        <input @bind="teamInput" @bind:event="oninput" @onkeypress="HandleKeyPress" class="team-stats-page-search-input"
            placeholder="Enter Team URL or Name (Case Sensitive)" />
        <button @onclick="FetchTeamStats" class="team-stats-page-search-button">Search</button>
    </div>

    @if (currentTeamInfo != null && currentTeamStats != null)
    {
        <div class="team-stats-page-result-container">
            <div class="team-stats-page-left-column">
                <TeamCard TeamInfo="@currentTeamInfo" TeamStats="@currentTeamStats" />
                @if (currentTeamInfo.Players != null && currentTeamInfo.Players.Any())
                {
                    <TeamPlayerList Players="@currentTeamInfo.Players" />
                }
            </div>
            <div class="team-stats-page-right-column">
                <MapStatsCard MapStats="@mapStats" />
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="team-stats-page-error-message">
            @errorMessage
        </div>
    }
</div>

@if (isLoading)
{
    <div class="team-stats-page-loading-overlay">
        <div class="team-stats-page-loading-content">
            <div class="team-stats-page-spinner"></div>
            <p class="team-stats-page-loading-text">Loading team stats...</p>
        </div>
    </div>
}

<style>
    .team-stats-page-overlay {
        position: relative;
        filter: blur(
    @(isLoading
        ?
        "2px"
        :
        "0")
            );
        pointer-events:
    @(isLoading
        ?
        "none"
        :
        "auto")
        ;
        transition: filter 0.3s ease;
    }

    .team-stats-page-loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.1);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .team-stats-page-loading-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 1rem;
    }

    .team-stats-page-search-container {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin: 20px 0;
    }

    .team-stats-page-search-input {
        width: 400px;
        height: 50px;
        background-color: rgba(30, 30, 30, 0.7);
        border: 1px solid #fd7d27;
        border-radius: 8px;
        color: #ffffff !important;
        font-size: 1.1rem;
        padding: 0 20px;
        transition: all 0.3s ease;
        text-transform: none;
        font-family: Arial, sans-serif;
    }

    .team-stats-page-search-input::placeholder {
        color: #8d8d8d;
        text-transform: none;
        font-family: Arial, sans-serif;
    }

    .team-stats-page-search-input:focus {
        background-color: rgba(30, 30, 30, 0.9);
        border-color: #ff8f44;
        box-shadow: 0 0 0 2px rgba(253, 125, 39, 0.2);
        color: #ffffff !important;
    }

    .team-stats-page-search-button {
        height: 50px;
        min-width: 120px;
        background-color: #fd7d27;
        border: none;
        border-radius: 8px;
        font-size: 1.2rem;
        transition: all 0.3s ease;
    }

    .team-stats-page-search-button:hover {
        background-color: #ff8f44;
    }

    .team-stats-page-result-container {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 30px;
    }

    .team-stats-page-left-column {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .team-stats-page-right-column {
        display: flex;
        flex-direction: column;
    }

    .team-stats-page-spinner {
        width: 80px;
        height: 80px;
        border: 6px solid rgba(253, 125, 39, 0.1);
        border-left-color: #fd7d27;
        border-radius: 50%;
        -webkit-animation: team-stats-page-spin 1s linear infinite;
        animation: team-stats-page-spin 1s linear infinite;
    }

    .team-stats-page-loading-text {
        color: #fd7d27;
        font-size: 2rem;
        margin-top: 1rem;
        font-family: 'TolyerNo1', sans-serif;
    }

    .team-stats-page-error-message {
        text-align: center;
        color: #ff4444;
        margin-top: 20px;
        font-size: 1.2rem;
    }
    
        @@-webkit-keyframes team-stats-page-spin {
        from {
            -webkit-transform: rotate(0deg);
        }

        to {
            -webkit-transform: rotate(360deg);
        }
    }

    @@keyframes team-stats-page-spin {
        from {
            transform: rotate(0deg);
        }

        to {
            transform: rotate(360deg);
        }
    }
</style>

@code {
    [Parameter]
    public string TeamName { get; set; }

    private string teamInput;
    private TeamInfo currentTeamInfo;
    private TeamStats currentTeamStats;
    private List<MapStats> mapStats;
    private bool isLoading;
    private string errorMessage;
    private bool initialLoad = true;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(TeamName) && initialLoad)
        {
            initialLoad = false;
            teamInput = Uri.UnescapeDataString(TeamName);
            await FetchTeamStats();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await FetchTeamStats();
        }
    }

    private async Task FetchTeamStats()
    {
        if (string.IsNullOrWhiteSpace(teamInput))
        {
            errorMessage = "Please enter a team URL or name";
            return;
        }

        isLoading = true;
        errorMessage = null;

        try
        {
            string teamId = await GetTeamID.GetTeamIDFromUrlAsync(teamInput);
            if (!string.IsNullOrEmpty(teamId) && !teamId.StartsWith("Failed"))
            {
                var (info, stats, maps) = await TeamStatsHandler.GetTeamStatsAsync(teamId, "cs2");
                currentTeamInfo = info;
                currentTeamStats = stats;
                mapStats = maps;

                if (!string.IsNullOrEmpty(teamInput))
                {
                    NavigationManager.NavigateTo($"/team-stats/{Uri.EscapeDataString(teamInput)}", false);
                }
            }
            else
            {
                errorMessage = "Failed to fetch team information. Please check the URL or name and try again.";
                currentTeamInfo = null;
                currentTeamStats = null;
                mapStats = null;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            currentTeamInfo = null;
            currentTeamStats = null;
            mapStats = null;
        }
        finally
        {
            isLoading = false;
        }
    }
}