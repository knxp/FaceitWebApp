@page "/player-stats"
@page "/player-stats/{Nickname}"
@using faceitWebApp.Handlers
@using faceitWebApp.Utilities
@using faceitWebApp.Models
@using faceitWebApp.Components
@inject BasicStatsHandler BasicStatsHandler
@inject GetPlayerID GetPlayerID
@inject GetPlayerInfo GetPlayerInfo
@inject GetMatchHistory GetMatchHistory
@inject NavigationManager NavigationManager
@inject Blazor.Analytics.IAnalytics Analytics

<div class="@(isLoading ? "player-overlay" : "")">
    <h3 class="text-center">Basic Stats</h3>

    <div class="player-search-wrapper">
        <PlayerSearch OnSearchComplete="HandleSearch" />
        <div class="player-match-limit">
            <select @bind="matchLimit" class="player-match-select">
                <option value="20">20</option>
                <option value="50">50</option>
                <option value="100">100</option>
                <option value="200">200</option>
                <option value="300">300</option>
            </select>
        </div>
    </div>

    @if (playerStats != null && playerInfo != null)
    {
        <div class="player-stats-layout">
            <div class="player-stats-left-column">
                <PlayerCard PlayerInfo="@playerInfo" MatchHistory="@matchHistory" />
                <PlayerTeams Teams="@playerInfo.Teams" />
            </div>
            <div class="player-stats-container">
                <div class="player-stats-column">
                    <div class="player-stat-row">
                        <span class="player-stat-label">Kills</span>
                        <span class="player-stat-value">@playerStats.Kills.ToString("F2")</span>
                    </div>
                    <div class="player-stat-row">
                        <span class="player-stat-label">Deaths</span>
                        <span class="player-stat-value">@playerStats.Deaths.ToString("F2")</span>
                    </div>
                    <div class="player-stat-row">
                        <span class="player-stat-label">Assists</span>
                        <span class="player-stat-value">@playerStats.Assists.ToString("F2")</span>
                    </div>
                    <div class="player-stat-row">
                        <span class="player-stat-label">K/D Ratio</span>
                        <span class="player-stat-value">@playerStats.KDRatio.ToString("F2")</span>
                    </div>
                    <div class="player-stat-row">
                        <span class="player-stat-label">K/R Ratio</span>
                        <span class="player-stat-value">@playerStats.KRRRatio.ToString("F2")</span>
                    </div>
                    <div class="player-stat-row">
                        <span class="player-stat-label">HS %</span>
                        <span class="player-stat-value">@playerStats.HeadshotsPercentage.ToString("F2")%</span>
                    </div>
                    <div class="player-stat-row">
                        <span class="player-stat-label">HS Per Game</span>
                        <span class="player-stat-value">@playerStats.Headshots.ToString("F2")</span>
                    </div>
                    <div class="player-stat-row">
                        <span class="player-stat-label">Triple Kills</span>
                        <span class="player-stat-value">@playerStats.TripleKills.ToString("F2")</span>
                    </div>
                    <div class="player-stat-row">
                        <span class="player-stat-label">Quadro Kills</span>
                        <span class="player-stat-value">@playerStats.QuadroKills.ToString("F2")</span>
                    </div>
                    <div class="player-stat-row">
                        <span class="player-stat-label">Penta Kills</span>
                        <span class="player-stat-value">@playerStats.PentaKills.ToString("F2")</span>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="player-error-message">@errorMessage</div>
    }
</div>

@if (isLoading)
{
    <div class="player-loading-overlay">
        <div class="player-loading-content">
            <div class="player-spinner"></div>
            <p class="player-loading-text">Loading stats...</p>
        </div>
    </div>
}

<style>
    .player-overlay {
        position: relative;
        filter: blur(
    @(isLoading
        ?
        "2px"
        :
        "0")
            );
        pointer-events:
    @(isLoading
        ?
        "none"
        :
        "auto")
        ;
        transition: filter 0.3s ease;
    }

    .player-loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.1);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .player-loading-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 1rem;
    }

    .player-search-wrapper {
        display: flex;
        flex-direction: row;
        justify-content: center;
        gap: 15px;
        margin-bottom: 20px;
    }

    .player-match-limit {
        display: flex;
        align-items: center;
        gap: 8px;
        font-family: Arial, sans-serif;
    }

    .player-match-select {
        width: 80px;
        height: 50px;
        background-color: rgba(30, 30, 30, 0.7);
        border: 1px solid #fd7d27;
        border-radius: 8px;
        color: #757575;
        font-size: 1.2rem;
        padding: 0 10px;
        transition: all 0.3s ease;
        text-align: center;
    }

    .player-match-select option {
        background-color: #1e1e1e;
        color: #ffffff;
        text-align: center;
    }

    .player-stats-layout {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 20px;
    }

    .player-stats-left-column {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .player-stats-container {
        background-color: #ffffff1a;
        border: 1px solid #fd7d27;
        border-radius: 10px;
        padding: 20px;
        width: 600px;
        height: fit-content;
    }

    .player-stats-column {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .player-stat-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 5px;
        border-radius: 5px;
        transition: background-color 0.3s;
        border: 0.5px solid #ffffff1a;
    }

    .player-stat-row:hover {
        background-color: rgba(255, 255, 255, 0.05);
    }

    .player-stat-label {
        color: #ffffff;
        font-size: 1.8rem;
        font-family: 'TolyerNo1', sans-serif;
        letter-spacing: 0.5px;
        flex: 1;
        text-align: left;
    }

    .player-stat-value {
        color: #fd7d27;
        font-size: 2.2rem;
        font-family: 'TolyerNo1', sans-serif;
        font-weight: bold;
        letter-spacing: 1px;
        flex: 1;
        text-align: right;
    }

    .player-spinner {
        width: 80px;
        height: 80px;
        border: 6px solid rgba(253, 125, 39, 0.1);
        border-left-color: #fd7d27;
        border-radius: 50%;
        -webkit-animation: player-spin 1s linear infinite;
        animation: player-spin 1s linear infinite;
    }

    .player-loading-text {
        color: #fd7d27;
        font-size: 2rem;
        margin-top: 1rem;
        font-family: 'TolyerNo1', sans-serif;
    }

    .player-error-message {
        text-align: center;
        color: #ff4444;
        margin-top: 20px;
        font-size: 1.2rem;
    }

    @@-webkit-keyframes player-spin {
        from {
            -webkit-transform: rotate(0deg);
        }

        to {
            -webkit-transform: rotate(360deg);
        }
    }

    @@keyframes player-spin {
        from {
            transform: rotate(0deg);
        }

        to {
            transform: rotate(360deg);
        }
    }

    @@media (max-width: 768px) {
        .player-match-select {
            width: 95%;
            max-width: 200px;
        }

        .player-search-wrapper {
            flex-direction: column;
            align-items: center;
            }

        .player-match-limit{
            margin-top: -20px;
            width: 20%;
        }

        .player-stats-layout {
            flex-direction: column;
            gap: 15px;
        }

        .player-stats-container {
            width: 100%;
            padding: 15px;
        }

        .player-stat-label,
        .player-stat-value {
            font-size: 1.5rem;
        }

        .player-loading-text {
            font-size: 1.5rem;
        }
    }
</style>

@code {
    [Parameter]
    public string Nickname { get; set; }

    private string nickname;
    private Player playerStats;
    private Player playerInfo;
    private List<MatchHistory> matchHistory;
    private bool isLoading;
    private string errorMessage;
    private int matchLimit = 100;
    private bool initialLoad = true;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(Nickname) && initialLoad)
        {
            initialLoad = false;
            nickname = Uri.UnescapeDataString(Nickname);
            await Analytics.TrackNavigation($"/player-stats/{Uri.EscapeDataString(nickname)}");
            await Analytics.TrackEvent("Player", "Search", nickname);
            await FetchPlayerStats();
        }
    }

    private async Task HandleSearch(string searchNickname)
    {
        if (string.IsNullOrWhiteSpace(searchNickname))
        {
            errorMessage = "Please enter a nickname";
            await Analytics.TrackEvent("Player", "SearchError", "Empty Nickname");
            return;
        }

        try
        {
            nickname = searchNickname;
            await Analytics.TrackEvent("Player", "Search", nickname);
            NavigationManager.NavigateTo($"/player-stats/{Uri.EscapeDataString(nickname)}", false);
            await FetchPlayerStats();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            await Analytics.TrackEvent("Player", "SearchError", ex.Message);
        }
    }

    private async Task FetchPlayerStats()
    {
        if (string.IsNullOrWhiteSpace(nickname))
        {
            errorMessage = "Please enter a player nickname";
            await Analytics.TrackEvent("Player", "SearchError", "Empty Nickname");
            return;
        }

        try
        {
            isLoading = true;
            errorMessage = null;
            StateHasChanged();

            var playerId = await GetPlayerID.GetPlayerIDFromNicknameAsync(nickname);

            if (!playerId.StartsWith("Error") && !playerId.StartsWith("!!CASE SENSITIVE!!"))
            {
                var playerInfoTask = GetPlayerInfo.GetPlayerInfoAsync(playerId, nickname);
                var playerStatsTask = BasicStatsHandler.GetAverageBasicStatsAsync(playerId, matchLimit);
                var matchHistoryTask = GetMatchHistory.GetMatchHistoryAsync(playerId);

                await Task.WhenAll(playerInfoTask, playerStatsTask, matchHistoryTask);

                playerInfo = await playerInfoTask;
                playerStats = await playerStatsTask;
                matchHistory = await matchHistoryTask;

                if (!string.IsNullOrEmpty(nickname))
                {
                    NavigationManager.NavigateTo($"/player-stats/{Uri.EscapeDataString(nickname)}", false);
                }

                await Analytics.TrackEvent("Player", "StatsLoaded", nickname);
            }
            else
            {
                errorMessage = playerId;
                playerInfo = null;
                playerStats = null;
                matchHistory = null;
                await Analytics.TrackEvent("Player", "SearchError", playerId);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            playerInfo = null;
            playerStats = null;
            matchHistory = null;
            await Analytics.TrackEvent("Player", "StatsError", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}