@page "/player-stats"
@using faceitApp.Handlers
@using faceitApp.Utilities
@using faceitApp.Models
@using faceitWebApp.Components
@inject BasicStatsHandler BasicStatsHandler
@inject GetPlayerID GetPlayerID
@inject GetPlayerInfo GetPlayerInfo
@inject GetMatchHistory GetMatchHistory

<h3 class="text-center">Player Stats</h3>

<PlayerSearch OnSearchComplete="FetchPlayerStats" />

@if (playerStats != null && playerInfo != null)
{
    <div class="stats-layout">
        <PlayerCard PlayerInfo="@playerInfo" MatchHistory="@matchHistory" />
        <div class="stats-list">
            <div class="stats-column">
                <div class="stat-row">
                    <span class="stat-label">Kills</span>
                    <span class="stat-value">@playerStats.Kills.ToString("F2")</span>
                </div>
                <div class="stat-row">
                    <span class="stat-label">Deaths</span>
                    <span class="stat-value">@playerStats.Deaths.ToString("F2")</span>
                </div>
                <div class="stat-row">
                    <span class="stat-label">Assists</span>
                    <span class="stat-value">@playerStats.Assists.ToString("F2")</span>
                </div>
                <div class="stat-row">
                    <span class="stat-label">K/D Ratio</span>
                    <span class="stat-value">@playerStats.KDRatio.ToString("F2")</span>
                </div>
                <div class="stat-row">
                    <span class="stat-label">K/R Ratio</span>
                    <span class="stat-value">@playerStats.KRRRatio.ToString("F2")</span>
                </div>
                <div class="stat-row">
                    <span class="stat-label">HS %</span>
                    <span class="stat-value">@playerStats.HeadshotsPercentage.ToString("F2")%</span>
                </div>
                <div class="stat-row">
                    <span class="stat-label">HS Per Game</span>
                    <span class="stat-value">@playerStats.Headshots.ToString("F2")</span>
                </div>
                <div class="stat-row">
                    <span class="stat-label">Triple Kills</span>
                    <span class="stat-value">@playerStats.TripleKills.ToString("F2")</span>
                </div>
                <div class="stat-row">
                    <span class="stat-label">Quadro Kills</span>
                    <span class="stat-value">@playerStats.QuadroKills.ToString("F2")</span>
                </div>
                <div class="stat-row">
                    <span class="stat-label">Penta Kills</span>
                    <span class="stat-value">@playerStats.PentaKills.ToString("F2")</span>
                </div>
            </div>
        </div>
    </div>
}
else if (isLoading)
{
    <div class="loading-container">
        <div class="spinner"></div>
        <p class="loading-text">Loading stats...</p>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="error-message">@errorMessage</div>
}

<style>
    .stats-layout {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 20px;
    }

    .stats-list {
        background-color: #ffffff1a;
        border: 1px solid #fd7d27;
        border-radius: 10px;
        padding: 20px;
        width: 600px;
    }


    .stats-column {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .stat-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 5px;
        border-radius: 5px;
        transition: background-color 0.3s;
        border: 0.5px solid #ffffff1a;
    }

    .stat-row:hover {
        background-color: rgba(255, 255, 255, 0.05);
    }

    .stat-label {
        color: #ffffff;
        font-size: 1.8rem;
        font-family: 'TolyerNo1', sans-serif;
        letter-spacing: 0.5px;
        flex: 1;
        text-align: left;
    }

    .stat-value {
        color: #fd7d27;
        font-size: 2.2rem;
        font-family: 'TolyerNo1', sans-serif;
        font-weight: bold;
        letter-spacing: 1px;
        flex: 1;
        text-align: right;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        margin-top: 2rem;
    }

    .spinner {
        width: 60px;
        height: 60px;
        border: 6px solid rgba(253, 125, 39, 0.1);
        border-left-color: #fd7d27;
        border-radius: 50%;
        -webkit-animation: spin 1s linear infinite;
        animation: spin 1s linear infinite;
    }

    .loading-text {
        color: #fd7d27;
        font-size: 2rem;
        margin-top: 1rem;
        font-family: 'TolyerNo1', sans-serif;
    }

    .error-message {
        text-align: center;
        color: #ff4444;
        margin-top: 20px;
        font-size: 1.2rem;
    }

    @@-webkit-keyframes spin {
        from {
            -webkit-transform: rotate(0deg);
        }

        to {
            -webkit-transform: rotate(360deg);
        }
    }

    @@keyframes spin {
        from {
            transform: rotate(0deg);
        }

        to {
            transform: rotate(360deg);
        }
    }
</style>

@code {
    private Player playerStats;
    private Player playerInfo;
    private List<MatchHistory> matchHistory;
    private bool isLoading;
    private string errorMessage;

    private async Task FetchPlayerStats(string nickname)
    {
        if (string.IsNullOrWhiteSpace(nickname))
        {
            errorMessage = "Please enter a player nickname";
            return;
        }

        isLoading = true;
        errorMessage = null;

        try
        {
            var playerId = await GetPlayerID.GetPlayerIDFromNicknameAsync(nickname);

            if (!playerId.StartsWith("Error") && !playerId.StartsWith("!!CASE SENSITIVE!!"))
            {
                var playerInfoTask = GetPlayerInfo.GetPlayerInfoAsync(playerId);
                var playerStatsTask = BasicStatsHandler.GetAverageBasicStatsAsync(playerId);
                var matchHistoryTask = GetMatchHistory.GetMatchHistoryAsync(playerId);

                await Task.WhenAll(playerInfoTask, playerStatsTask, matchHistoryTask);

                playerInfo = await playerInfoTask;
                playerStats = await playerStatsTask;
                matchHistory = await matchHistoryTask;
            }
            else
            {
                errorMessage = playerId;
                playerInfo = null;
                playerStats = null;
                matchHistory = null;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            playerInfo = null;
            playerStats = null;
            matchHistory = null;
        }
        finally
        {
            isLoading = false;
        }
    }
}