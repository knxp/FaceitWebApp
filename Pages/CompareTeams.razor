@page "/compare-teams"
@page "/compare-teams/{Team1Name}/{Team2Name}"
@using faceitWebApp.Handlers
@using faceitWebApp.Utilities
@using faceitWebApp.Models
@using faceitWebApp.Components
@inject TeamStatsHandler TeamStatsHandler
@inject GetTeamID GetTeamID
@inject NavigationManager NavigationManager
@inject IGoogleAnalyticsService Analytics

<div class="@(isLoading ? "compare-overlay" : "")">
    <h3 class="text-center">Compare Teams</h3>

    <div class="compare-container">
        <div class="search-section">
            <input @bind="team1Input" @bind:event="oninput" @onkeypress="HandleKeyPress"
                class="form-control search-input" placeholder="Enter Team 1 Name" />
            <input @bind="team2Input" @bind:event="oninput" @onkeypress="HandleKeyPress"
                class="form-control search-input" placeholder="Enter Team 2 Name" />
            <button @onclick="CompareStats" class="btn btn-primary search-button" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                }
                else
                {
                    <span>Compare</span>
                }
            </button>
        </div>

        @if (team1Info != null && team2Info != null)
        {
            <div class="result-container">
                <TeamCard TeamInfo="@team1Info" TeamStats="@team1Stats" />
                <TeamCard TeamInfo="@team2Info" TeamStats="@team2Stats" />
            </div>

            <TeamComparison Team1Maps="@team1Maps" Team2Maps="@team2Maps" />
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">
                @errorMessage
            </div>
        }
    </div>
</div>

@if (isLoading)
{
    <div class="compare-loading-overlay">
        <div class="compare-loading-content">
            <div class="compare-spinner"></div>
            <p class="compare-loading-text">Loading comparison...</p>
        </div>
    </div>
}
<style>
    .compare-overlay {
        position: relative;
        filter: blur(
    @(isLoading
        ?
        "2px"
        :
        "0")
            );
        pointer-events:
    @(isLoading
        ?
        "none"
        :
        "auto")
        ;
        transition: filter 0.3s ease;
    }

    .compare-loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.1);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .compare-loading-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 1rem;
    }

    .compare-spinner {
        width: 80px;
        height: 80px;
        border: 6px solid rgba(253, 125, 39, 0.1);
        border-left-color: #fd7d27;
        border-radius: 50%;
        -webkit-animation: compare-spin 1s linear infinite;
        animation: compare-spin 1s linear infinite;
    }

    .compare-loading-text {
        color: #fd7d27;
        font-size: 2rem;
        margin-top: 1rem;
        font-family: 'TolyerNo1', sans-serif;
    }

    .compare-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .search-section {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin: 20px 0;
    }

    .search-input {
        width: 300px;
        height: 50px;
        background-color: rgba(30, 30, 30, 0.7);
        border: 1px solid #fd7d27;
        border-radius: 8px;
        color: #ffffff !important;
        font-size: 1.2rem;
        padding: 0 20px;
        transition: all 0.3s ease;
        text-transform: none;
        font-family: Arial, sans-serif;
    }

    .search-input::placeholder {
        color: #8d8d8d;
        text-transform: none;
        font-family: Arial, sans-serif;
    }

    .search-input:focus {
        background-color: rgba(30, 30, 30, 0.9);
        border-color: #ff8f44;
        box-shadow: 0 0 0 2px rgba(253, 125, 39, 0.2);
        color: #ffffff !important;
    }

    .search-button {
        height: 50px;
        min-width: 120px;
        background-color: #fd7d27;
        border: none;
        border-radius: 8px;
        font-size: 1.2rem;
        transition: all 0.3s ease;
    }

    .search-button:hover {
        background-color: #ff8f44;
    }

    .result-container {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 30px;
    }

    .error-message {
        text-align: center;
        color: #ff4444;
        margin-top: 20px;
        font-size: 1.2rem;
    }

    @@-webkit-keyframes compare-spin {
        from {
            -webkit-transform: rotate(0deg);
        }

        to {
            -webkit-transform: rotate(360deg);
        }
    }

    @@keyframes compare-spin {
        from {
            transform: rotate(0deg);
        }

        to {
            transform: rotate(360deg);
        }
    }
</style>

@code {
    [Parameter]
    public string Team1Name { get; set; }

    [Parameter]
    public string Team2Name { get; set; }

    private string team1Input;
    private string team2Input;
    private TeamInfo team1Info;
    private TeamInfo team2Info;
    private TeamStats team1Stats;
    private TeamStats team2Stats;
    private List<MapStats> team1Maps;
    private List<MapStats> team2Maps;
    private bool isLoading;
    private string errorMessage;
    private bool initialLoad = true;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Team1Name) && !string.IsNullOrEmpty(Team2Name))
        {
            team1Input = Uri.UnescapeDataString(Team1Name);
            team2Input = Uri.UnescapeDataString(Team2Name);
            if (initialLoad)
            {
                initialLoad = false;
                await Analytics.TrackPageView($"/compare-teams/{Team1Name}/{Team2Name}", $"Compare Teams - {team1Input} vs {team2Input}");
                await Analytics.TrackEvent("Teams", "CompareView", $"{team1Input} vs {team2Input}");
            }
            await CompareStatsFromUrl();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await CompareStats();
        }
    }

    private async Task CompareStatsFromUrl()
    {
        if (string.IsNullOrWhiteSpace(team1Input) || string.IsNullOrWhiteSpace(team2Input))
        {
            await Analytics.TrackEvent("Teams", "CompareError", "Empty Team Names");
            return;
        }

        isLoading = true;
        errorMessage = null;

        try
        {
            var (team1Id, error1) = await GetTeamID.GetTeamIDFromUrlAsync(team1Input);
            var (team2Id, error2) = await GetTeamID.GetTeamIDFromUrlAsync(team2Input);

            if (!string.IsNullOrEmpty(team1Id) && !string.IsNullOrEmpty(team2Id))
            {
                var (info1, stats1, maps1) = await TeamStatsHandler.GetTeamStatsAsync(team1Id, "cs2");
                var (info2, stats2, maps2) = await TeamStatsHandler.GetTeamStatsAsync(team2Id, "cs2");

                team1Info = info1;
                team1Stats = stats1;
                team1Maps = maps1;
                team2Info = info2;
                team2Stats = stats2;
                team2Maps = maps2;
                errorMessage = null;

                await Analytics.TrackEvent("Teams", "CompareSuccess", $"{info1.Name} vs {info2.Name}");
            }
            else
            {
                var errors = new List<string>();
                if (!string.IsNullOrEmpty(error1)) errors.Add($"Team 1: {error1}");
                if (!string.IsNullOrEmpty(error2)) errors.Add($"Team 2: {error2}");
                errorMessage = string.Join(Environment.NewLine, errors);
                ResetTeamData();
                await Analytics.TrackEvent("Teams", "CompareError", errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            ResetTeamData();
            await Analytics.TrackEvent("Teams", "CompareError", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task CompareStats()
    {
        if (string.IsNullOrWhiteSpace(team1Input) || string.IsNullOrWhiteSpace(team2Input))
        {
            errorMessage = "Please enter both team names";
            await Analytics.TrackEvent("Teams", "CompareError", "Empty Team Names");
            return;
        }

        isLoading = true;
        errorMessage = null;

        try
        {
            var (team1Id, error1) = await GetTeamID.GetTeamIDFromUrlAsync(team1Input);
            var (team2Id, error2) = await GetTeamID.GetTeamIDFromUrlAsync(team2Input);

            if (!string.IsNullOrEmpty(team1Id) && !string.IsNullOrEmpty(team2Id))
            {
                var (info1, stats1, maps1) = await TeamStatsHandler.GetTeamStatsAsync(team1Id, "cs2");
                var (info2, stats2, maps2) = await TeamStatsHandler.GetTeamStatsAsync(team2Id, "cs2");

                team1Info = info1;
                team1Stats = stats1;
                team1Maps = maps1;
                team2Info = info2;
                team2Stats = stats2;
                team2Maps = maps2;
                errorMessage = null;

                var currentUri = new Uri(NavigationManager.Uri);
                var newUri = $"/compare-teams/{Uri.EscapeDataString(info1.Name)}/{Uri.EscapeDataString(info2.Name)}";

                if (currentUri.AbsolutePath != newUri)
                {
                    NavigationManager.NavigateTo(newUri, false);
                }

                await Analytics.TrackPageView(newUri, $"Compare Teams - {info1.Name} vs {info2.Name}");
                await Analytics.TrackEvent("Teams", "CompareSuccess", $"{info1.Name} vs {info2.Name}");
            }
            else
            {
                var errors = new List<string>();
                if (!string.IsNullOrEmpty(error1)) errors.Add($"Team 1: {error1}");
                if (!string.IsNullOrEmpty(error2)) errors.Add($"Team 2: {error2}");
                errorMessage = string.Join(Environment.NewLine, errors);
                ResetTeamData();
                await Analytics.TrackEvent("Teams", "CompareError", errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            ResetTeamData();
            await Analytics.TrackEvent("Teams", "CompareError", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ResetTeamData()
    {
        team1Info = null;
        team1Stats = null;
        team1Maps = null;
        team2Info = null;
        team2Stats = null;
        team2Maps = null;
    }
}
