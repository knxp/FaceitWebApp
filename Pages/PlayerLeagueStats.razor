@page "/player-league-stats"
@using faceitApp.Handlers
@using faceitApp.Utilities
@using faceitApp.Models
@using faceitWebApp.Components
@inject PlayerLeagueStatsHandler PlayerLeagueStatsHandler
@inject GetPlayerID GetPlayerID

<h3 class="text-center">League Stats</h3>

<PlayerSearch OnSearchComplete="FetchPlayerStats" />

@if (leagueStats?.OverallStats != null)
{
    <div class="season-selector">
        <button class="season-button @(selectedSeason == null ? "active" : "")" @onclick="() => SelectSeason(null)">
            Overall
        </button>
        @foreach (var season in leagueStats.SeasonStats.OrderByDescending(s => s.Season))
        {
            <button class="season-button @(selectedSeason == season.Season ? "active" : "")"
                @onclick="() => SelectSeason(season.Season)">
                @season.Season
            </button>
        }
    </div>

    <div class="stats-container">
        @{
            var currentStats = selectedSeason == null
            ? new
            {
                Stats = leagueStats.OverallStats,
                Season = "Overall",
                Division = "All Divisions",
                MatchCount =
            leagueStats.TotalMatches
            }
            : leagueStats.SeasonStats.Where(s => s.Season == selectedSeason)
            .Select(s => new { Stats = s.Stats, Season = s.Season, Division = s.Division, MatchCount = s.MatchCount })
            .First();
        }
        <div class="season-info">
            <h4>@currentStats.Season - @currentStats.Division</h4>
            <p>@currentStats.MatchCount Matches</p>
        </div>
        <div class="stats-grid">
            <!-- Column 1 -->
            <div class="stats-column">
                <div class="stat-row">
                    <span class="stat-label">Kills</span>
                    <span class="stat-value">@currentStats.Stats.Kills.ToString("F2")</span>
                </div>
                <div class="stat-row">
                    <span class="stat-label">Deaths</span>
                    <span class="stat-value">@currentStats.Stats.Deaths.ToString("F2")</span>
                </div>
                <div class="stat-row">
                    <span class="stat-label">Assists</span>
                    <span class="stat-value">@currentStats.Stats.Assists.ToString("F2")</span>
                </div>
                <div class="stat-row">
                    <span class="stat-label">K/D Ratio</span>
                    <span class="stat-value">@currentStats.Stats.KDRatio.ToString("F2")</span>
                </div>
                <div class="stat-row">
                    <span class="stat-label">K/R Ratio</span>
                    <span class="stat-value">@currentStats.Stats.KRRRatio.ToString("F2")</span>
                </div>
            </div>

            <!-- Column 2 -->
            <div class="stats-column">
                <div class="stat-row">
                    <span class="stat-label">HS %</span>
                    <span class="stat-value">@currentStats.Stats.HeadshotsPercentage.ToString("F2")%</span>
                </div>
                <div class="stat-row">
                    <span class="stat-label">HS Per Game</span>
                    <span class="stat-value">@currentStats.Stats.Headshots.ToString("F2")</span>
                </div>
                <div class="stat-row">
                    <span class="stat-label">Triple Kills</span>
                    <span class="stat-value">@currentStats.Stats.TripleKills.ToString("F2")</span>
                </div>
                <div class="stat-row">
                    <span class="stat-label">Quad Kills</span>
                    <span class="stat-value">@currentStats.Stats.QuadroKills.ToString("F2")</span>
                </div>
                <div class="stat-row">
                    <span class="stat-label">Penta Kills</span>
                    <span class="stat-value">@currentStats.Stats.PentaKills.ToString("F2")</span>
                </div>
            </div>
        </div>
    </div>
}
else if (isLoading)
{
    <div class="loading-container">
        <div class="spinner"></div>
        <p class="loading-text">Loading league stats...</p>
        <p class="loading-subtext">This search may take longer than others due to processing league matches.</p>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="error-message">@errorMessage</div>
}

<style>
    .season-selector {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin: 20px 0;
        flex-wrap: nowrap;
        overflow-x: auto;
        padding: 10px;
    }

    .season-button {
        background-color: rgba(30, 30, 30, 0.7);
        border: 1px solid #fd7d27;
        border-radius: 8px;
        color: #ffffff;
        padding: 10px 20px;
        font-size: 1.6rem;
        cursor: pointer;
        transition: all 0.3s ease;
        white-space: nowrap;
        font-family: 'TolyerNo1', sans-serif;
    }

    .season-button:hover {
        background-color: rgba(30, 30, 30, 0.9);
        border-color: #ff8f44;
    }

    .season-button.active {
        background-color: #fd7d27;
        color: white;
    }



    .stats-container {
        background-color: #ffffff1a;
        border: 1px solid #fd7d27;
        border-radius: 10px;
        padding: 20px;
        margin: 20px auto;
        width: 600px;
        position: relative;
        left: 30%;
        transform: translateX(-50%);
        display: flex;
        /* Added */
        flex-direction: column;
        /* Added */
        align-items: center;
        /* Added */
    }

    .season-info {
        text-align: center;
        margin-bottom: 30px;
        padding-bottom: 20px;
        border-bottom: 2px solid rgba(253, 125, 39, 0.3);
    }

    .season-info h4 {
        color: #fd7d27;
        font-size: 3rem;
        margin-bottom: 10px;
        font-family: 'TolyerNo1', sans-serif;
    }

    .season-info p {
        color: #ffffff;
        font-size: 1.9rem;
        font-family: 'TolyerNo1', sans-serif;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 40px;
        width: 100%;
        max-width: 800px;
        margin: 0 auto;
    }

    .stats-column h5 {
        color: #ffffff;
        font-size: 3rem;
        text-align: center;
        margin-bottom: 25px;
        font-family: 'TolyerNo1', sans-serif;
        letter-spacing: 1px;
    }

    .stat-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 12px;
        padding: 8px 5px;
        border-radius: 5px;
        transition: background-color 0.3s;
        border: 0.5px solid #ffffff1a;
    }

    .stat-row:hover {
        background-color: rgba(255, 255, 255, 0.05);
    }

    .stat-label {
        color: #ffffff;
        font-size: 1.8rem;
        font-family: 'TolyerNo1', sans-serif;
        letter-spacing: 0.5px;
        flex: 1;
        text-align: left;
    }

    .stat-value {
        color: #fd7d27;
        font-size: 2.2rem;
        font-family: 'TolyerNo1', sans-serif;
        font-weight: bold;
        letter-spacing: 1px;
        flex: 1;
        text-align: right;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        margin-top: 2rem;
    }

    .spinner {
        width: 60px;
        height: 60px;
        border: 6px solid rgba(253, 125, 39, 0.1);
        border-left-color: #fd7d27;
        border-radius: 50%;
        -webkit-animation: spin 1s linear infinite;
        animation: spin 1s linear infinite;
    }

    .loading-text {
        color: #fd7d27;
        font-size: 2rem;
        margin-top: 1rem;
        font-family: 'TolyerNo1', sans-serif;
    }

    .loading-subtext {
        color: #a1a1a1;
        font-size: 2rem;
        margin-top: 0.5rem;
        font-family: 'TolyerNo1', sans-serif;
        text-align: center;
    }

    .error-message {
        text-align: center;
        color: #ff4444;
        margin-top: 20px;
        font-size: 1.2rem;
    }

    @@-webkit-keyframes spin {
        from {
            -webkit-transform: rotate(0deg);
        }

        to {
            -webkit-transform: rotate(360deg);
        }
    }

    @@keyframes spin {
        from {
            transform: rotate(0deg);
        }

        to {
            transform: rotate(360deg);
        }
    }
</style>

@code {
    private LeagueStatsCollection leagueStats;
    private string selectedSeason;
    private bool isLoading;
    private string errorMessage;

    private async Task FetchPlayerStats(string nickname)
    {
        if (string.IsNullOrWhiteSpace(nickname))
        {
            errorMessage = "Please enter a player nickname";
            return;
        }

        // Reset states immediately when search is clicked
        isLoading = true;
        errorMessage = null;
        leagueStats = null; // Reset current stats
        selectedSeason = null; // Reset selected season

        try
        {
            var playerId = await GetPlayerID.GetPlayerIDFromNicknameAsync(nickname);
            if (!playerId.StartsWith("Error") && !playerId.StartsWith("!!CASE SENSITIVE!!"))
            {
                leagueStats = await PlayerLeagueStatsHandler.GetLeagueStatsAsync(playerId);
            }
            else
            {
                errorMessage = playerId;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }


    private void SelectSeason(string season)
    {
        selectedSeason = season;
    }
}