@page "/player-league-stats"
@page "/player-league-stats/{Nickname}"
@using faceitWebApp.Handlers
@using faceitWebApp.Utilities
@using faceitWebApp.Models
@using faceitWebApp.Components
@using Microsoft.AspNetCore.WebUtilities
@inject PlayerLeagueStatsHandler PlayerLeagueStatsHandler
@inject GetPlayerID GetPlayerID
@inject NavigationManager NavigationManager

<div class="player-league-stats-overlay @(isLoading ? "active" : "")">
    <div class="player-league-stats-header-container">
        <h3 class="text-center">League Stats</h3>
        <div class="player-league-stats-info-icon-container">
            <span class="player-league-stats-info-icon">i</span>
            <div class="player-league-stats-tooltip-content">
                All statistics shown are averages per match.
                Detailed statistics are only available for Season 51 and newer.
                *Detailed Stats only available starting June 16 2024.*
            </div>
        </div>
    </div>

    <div class="player-league-stats-search-container mb-4">
        <input @bind="searchNickname" @bind:event="oninput" @onkeypress="HandleKeyPress"
            class="player-league-stats-search-input" placeholder="Enter Faceit Username" />
        <button @onclick="FetchPlayerStats" class="player-league-stats-search-button">Search</button>
    </div>

    @if (leagueStats?.OverallStats != null)
    {
        <div class="player-league-stats-season-selector">
            <button class="player-league-stats-season-button @(selectedSeason == null ? "active" : "")"
                @onclick="() => SelectSeason(null)">
                Overall
            </button>
            @foreach (var season in leagueStats.SeasonStats.OrderByDescending(s => s.Season))
            {
                <button class="player-league-stats-season-button @(selectedSeason == season.Season ? "active" : "")"
                    @onclick="() => SelectSeason(season.Season)">
                    @season.Season
                </button>
            }
        </div>

       
            var currentStats = selectedSeason == null
                ? new
                {
                    Stats = leagueStats.OverallStats,
                    Season = "Overall",
                    Division = "All Divisions",
                    MatchCount = leagueStats.TotalMatches
                }
                : leagueStats.SeasonStats.Where(s => s.Season == selectedSeason)
                    .Select(s => new
                    {
                        Stats = s.Stats,
                        Season = s.Season,
                        Division = s.Division,
                        MatchCount = s.MatchCount
                    })
                    .First();

            var seasonNumber = currentStats.Season.StartsWith("S") ? 
                int.TryParse(currentStats.Season.Substring(1), out int num) ? num : 0 : 0;
            var showDetailedStats = seasonNumber >= 51;
        

        <div class="@(showDetailedStats ? "player-league-stats-container-detailed" : "player-league-stats-container")">
            <div class="player-league-stats-season-info">
                <h4>@currentStats.Season - @currentStats.Division</h4>
                <p>@currentStats.MatchCount Matches</p>
            </div>

            @if (showDetailedStats)
            {
                <LeagueDetailedStats Stats="@currentStats.Stats" />
            }
            else
            {
                <div class="player-league-stats-grid">
                    <div class="player-league-stats-column">
                        <div class="player-league-stats-row">
                            <span class="player-league-stats-label">Kills</span>
                            <span class="player-league-stats-value">@currentStats.Stats.Kills.ToString("F2")</span>
                        </div>
                        <div class="player-league-stats-row">
                            <span class="player-league-stats-label">Deaths</span>
                            <span class="player-league-stats-value">@currentStats.Stats.Deaths.ToString("F2")</span>
                        </div>
                        <div class="player-league-stats-row">
                            <span class="player-league-stats-label">Assists</span>
                            <span class="player-league-stats-value">@currentStats.Stats.Assists.ToString("F2")</span>
                        </div>
                        <div class="player-league-stats-row">
                            <span class="player-league-stats-label">K/D Ratio</span>
                            <span class="player-league-stats-value">@currentStats.Stats.KDRatio.ToString("F2")</span>
                        </div>
                        <div class="player-league-stats-row">
                            <span class="player-league-stats-label">K/R Ratio</span>
                            <span class="player-league-stats-value">@currentStats.Stats.KRRRatio.ToString("F2")</span>
                        </div>
                    </div>

                    <div class="player-league-stats-column">
                        <div class="player-league-stats-row">
                            <span class="player-league-stats-label">HS %</span>
                            <span class="player-league-stats-value">@currentStats.Stats.HeadshotsPercentage.ToString("F2")%</span>
                        </div>
                        <div class="player-league-stats-row">
                            <span class="player-league-stats-label">HS Per Game</span>
                            <span class="player-league-stats-value">@currentStats.Stats.Headshots.ToString("F2")</span>
                        </div>
                        <div class="player-league-stats-row">
                            <span class="player-league-stats-label">Triple Kills</span>
                            <span class="player-league-stats-value">@currentStats.Stats.TripleKills.ToString("F2")</span>
                        </div>
                        <div class="player-league-stats-row">
                            <span class="player-league-stats-label">Quad Kills</span>
                            <span class="player-league-stats-value">@currentStats.Stats.QuadroKills.ToString("F2")</span>
                        </div>
                        <div class="player-league-stats-row">
                            <span class="player-league-stats-label">Penta Kills</span>
                            <span class="player-league-stats-value">@currentStats.Stats.PentaKills.ToString("F2")</span>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="player-league-stats-error">@errorMessage</div>
    }
</div>

@if (isLoading)
{
    <div class="player-league-stats-loading-overlay">
        <div class="player-league-stats-loading-content">
            <div class="player-league-stats-spinner"></div>
            <p class="player-league-stats-loading-text">Loading league stats...</p>
            <p class="player-league-stats-loading-subtext">This search may take longer than others due to processing league matches.</p>
        </div>
    </div>
}

<style>
    .player-league-stats-overlay {
        position: relative;
        filter: blur(
    @(isLoading
        ?
        "2px"
        :
        "0")
            );
        pointer-events:
    @(isLoading
        ?
        "none"
        :
        "auto")
        ;
        transition: filter 0.3s ease;
    }

    .player-league-stats-header-container {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px;
        margin-bottom: 20px;
    }

    .player-league-stats-info-icon-container {
        position: relative;
        display: inline-block;
    }

    .player-league-stats-info-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background-color: #5f94ff;
        color: white;
        font-size: 15px;
        cursor: help;
        transition: background-color 0.3s;
        font-family: 'Times New Roman', Times, serif;
        text-transform: lowercase;
        font-weight: bold;
    }

    .player-league-stats-info-icon:hover {
        background-color: #ff8f44;
    }

    .player-league-stats-tooltip-content {
        visibility: hidden;
        position: absolute;
        width: 400px;
        background-color: rgb(83, 83, 83);
        color: #ffffff;
        text-align: center;
        padding: 10px;
        border-radius: 8px;
        border: 1px solid #fd7d27;
        font-size: 20px;
        line-height: 1.4;
        z-index: 1;
        top: 0;
        left: 100%;
        margin-left: 10px;
        transform: none;
        opacity: 0;
        transition: opacity 0.3s;
    }

    .player-league-stats-info-icon-container:hover .player-league-stats-tooltip-content {
        visibility: visible;
        opacity: 1;
    }

    .player-league-stats-tooltip-content::after {
        content: "";
        position: absolute;
        top: 50%;
        right: 100%;
        margin-top: -5px;
        border-width: 5px;
        border-style: solid;
        border-color: transparent #fd7d27 transparent transparent;
    }

    .player-league-stats-search-container {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin: 20px 0;
    }

    .player-league-stats-search-input {
        width: 400px;
        height: 50px;
        background-color: rgba(30, 30, 30, 0.7);
        border: 1px solid #fd7d27;
        border-radius: 8px;
        color: #ffffff !important;
        font-size: 1.2rem;
        padding: 0 20px;
        transition: all 0.3s ease;
        text-transform: none;
        font-family: Arial, sans-serif;
    }

    .player-league-stats-search-input::placeholder {
        color: #8d8d8d;
        text-transform: none;
        font-family: Arial, sans-serif;
    }

    .player-league-stats-search-input:focus {
        background-color: rgba(30, 30, 30, 0.9);
        border-color: #ff8f44;
        box-shadow: 0 0 0 2px rgba(253, 125, 39, 0.2);
        color: #ffffff !important;
    }

    .player-league-stats-search-button {
        height: 50px;
        min-width: 120px;
        background-color: #fd7d27;
        border: none;
        border-radius: 8px;
        font-size: 1.2rem;
        transition: all 0.3s ease;
        color: #ffffff;
    }

    .player-league-stats-search-button:hover {
        background-color: #ff8f44;
    }

    .player-league-stats-season-selector {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin: 20px 0;
        flex-wrap: nowrap;
        overflow-x: auto;
        padding: 10px;
    }

    .player-league-stats-season-button {
        background-color: rgba(30, 30, 30, 0.7);
        border: 1px solid #fd7d27;
        border-radius: 8px;
        color: #ffffff;
        padding: 10px 20px;
        font-size: 1.6rem;
        cursor: pointer;
        transition: all 0.3s ease;
        white-space: nowrap;
        font-family: 'TolyerNo1', sans-serif;
    }

    .player-league-stats-season-button:hover {
        background-color: rgba(30, 30, 30, 0.9);
        border-color: #ff8f44;
    }

    .player-league-stats-season-button.active {
        background-color: #fd7d27;
        color: white;
    }

    .player-league-stats-container {
        background-color: #ffffff1a;
        border: 1px solid #fd7d27;
        border-radius: 10px;
        padding: 20px;
        margin: 20px auto;
        width: 600px;
        position: relative;
        left: 50%;
        transform: translateX(-80%);
    }

    .player-league-stats-container-detailed {
        background-color: #ffffff1a;
        border: 1px solid #fd7d27;
        border-radius: 10px;
        padding: 20px;
        margin: 20px auto;
        width: 1500px;
        position: relative;
        left: 50%;
        transform: translateX(-50%);
    }

    .player-league-stats-season-info {
        text-align: center;
        margin-bottom: 30px;
        padding-bottom: 20px;
        border-bottom: 2px solid rgba(253, 125, 39, 0.3);
    }

    .player-league-stats-season-info h4 {
        color: #fd7d27;
        font-size: 3rem;
        margin-bottom: 10px;
        font-family: 'TolyerNo1', sans-serif;
    }

    .player-league-stats-season-info p {
        color: #ffffff;
        font-size: 1.9rem;
        font-family: 'TolyerNo1', sans-serif;
    }

    .player-league-stats-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 40px;
        width: 100%;
        max-width: 800px;
        margin: 0 auto;
    }

    .player-league-stats-column {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .player-league-stats-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 5px;
        border-radius: 5px;
        transition: background-color 0.3s;
        border: 0.5px solid #ffffff1a;
    }

    .player-league-stats-row:hover {
        background-color: rgba(255, 255, 255, 0.05);
    }

    .player-league-stats-label {
        color: #ffffff;
        font-size: 1.8rem;
        font-family: 'TolyerNo1', sans-serif;
        letter-spacing: 0.5px;
        flex: 1;
        text-align: left;
    }

    .player-league-stats-value {
        color: #fd7d27;
        font-size: 2.2rem;
        font-family: 'TolyerNo1', sans-serif;
        font-weight: bold;
        letter-spacing: 1px;
        flex: 1;
        text-align: right;
    }

    .player-league-stats-loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.1);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .player-league-stats-loading-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 1rem;
    }

    .player-league-stats-spinner {
        width: 80px;
        height: 80px;
        border: 6px solid rgba(253, 125, 39, 0.1);
        border-left-color: #fd7d27;
        border-radius: 50%;
        -webkit-animation: player-league-stats-spin 1s linear infinite;
        animation: player-league-stats-spin 1s linear infinite;
    }

    .player-league-stats-loading-text {
        color: #fd7d27;
        font-size: 2rem;
        margin-top: 1rem;
        font-family: 'TolyerNo1', sans-serif;
    }

    .player-league-stats-loading-subtext {
        color: #a1a1a1;
        font-size: 2rem;
        margin-top: 0.5rem;
        font-family: 'TolyerNo1', sans-serif;
        text-align: center;
    }

    .player-league-stats-error {
        text-align: center;
        color: #ff4444;
        margin-top: 20px;
        font-size: 1.2rem;
    }

    @@-webkit-keyframes player-league-stats-spin {
        from {
            -webkit-transform: rotate(0deg);
        }

        to {
            -webkit-transform: rotate(360deg);
        }
    }

    @@keyframes player-league-stats-spin {
        from {
            transform: rotate(0deg);
        }

        to {
            transform: rotate(360deg);
        }
    }
</style>

@code {
    [Parameter]
    public string Nickname { get; set; }

    private string searchNickname;
    private LeagueStatsCollection leagueStats;
    private string selectedSeason;
    private bool isLoading;
    private string errorMessage;

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(Nickname))
        {
            searchNickname = Uri.UnescapeDataString(Nickname);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(Nickname) && (leagueStats == null || searchNickname != Uri.UnescapeDataString(Nickname)))
        {
            searchNickname = Uri.UnescapeDataString(Nickname);
            await FetchPlayerStats();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await FetchPlayerStats();
        }
    }

    private async Task FetchPlayerStats()
    {
        if (string.IsNullOrWhiteSpace(searchNickname))
        {
            errorMessage = "Please enter a player nickname";
            return;
        }

        isLoading = true;
        errorMessage = null;
        leagueStats = null;
        selectedSeason = null;
        StateHasChanged();

        try
        {
            var playerId = await GetPlayerID.GetPlayerIDFromNicknameAsync(searchNickname);
            if (!playerId.StartsWith("Error") && !playerId.StartsWith("!!CASE SENSITIVE!!"))
            {
                leagueStats = await PlayerLeagueStatsHandler.GetLeagueStatsAsync(playerId);

                var currentNickname = Uri.UnescapeDataString(Nickname ?? "");
                if (searchNickname != currentNickname)
                {
                    NavigationManager.NavigateTo($"/player-league-stats/{Uri.EscapeDataString(searchNickname)}", false);
                }
            }
            else
            {
                errorMessage = playerId;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void SelectSeason(string season)
    {
        selectedSeason = season;
    }
}